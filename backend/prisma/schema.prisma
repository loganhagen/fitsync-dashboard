generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConnectionProvider {
  GOOGLE
  FITBIT
}

model Connection {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  provider          ConnectionProvider
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?
  scope             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  userId            String             @db.Uuid
  User              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique
  firstName       String
  lastName        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Connection      Connection[]
  SleepLog        SleepLog[]
  SkinTemperature SkinTemperature[]
}

model SleepLog {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fitbitLogId         BigInt
  userId              String   @db.Uuid
  dateOfSleep         DateTime
  startTime           DateTime
  endTime             DateTime
  duration            Int
  efficiency          Int
  minutesToFallAsleep Int
  minutesAsleep       Int
  minutesAwake        Int
  timeInBed           Int
  isMainSleep         Boolean
  type                String
  infoCode            Int
  levels              Json?
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dateOfSleep])
}

enum TemperatureLogType {
  DEDICATED_TRACKER
  OTHER
}

model SkinTemperature {
  id              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateTime        DateTime
  nightlyRelative Float
  logType         TemperatureLogType
  userId          String             @db.Uuid
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dateTime])
}
