generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum ConnectionProvider {
//   GOOGLE
//   FITBIT
// }

// model Connection {
//   id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   provider          ConnectionProvider
//   providerAccountId String
//   accessToken       String?
//   refreshToken      String?
//   expiresAt         DateTime?
//   scope             String?
//   createdAt         DateTime           @default(now())
//   updatedAt         DateTime
//   userId            String             @db.Uuid
//   User              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model User {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                 @unique
  firstName            String
  lastName             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  // Connection           Connection[]
  SleepLog             SleepLog[]
  SkinTemperature      SkinTemperature[]
  BreathingRate        BreathingRate[]
  HeartRateVariability HeartRateVariability[]
  SpO2                 SpO2[]
  // FitbitRawSleepLog    FitbitRawSleepLog[]
}

model SleepLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid
  dateTime   DateTime
  bedTime    DateTime
  wakeTime   DateTime
  duration   Int
  efficiency Int
  awakeMins  Int
  lightMins  Int
  deepMins   Int
  remMins    Int
  // rawLog   FitbitRawSleepLog @relation(fields: [rawLogId], references: [id])
  // rawLogId String            @unique @db.Uuid
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model FitbitRawSleepLog {
//   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userId    String
//   payload   Json
//   createdAt DateTime
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   SleepLog SleepLog[]
// }

enum TemperatureLogType {
  DEDICATED_TRACKER
  OTHER
}

model SkinTemperature {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateTime DateTime
  average  Float
  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dateTime])
}

model BreathingRate {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateTime      DateTime @db.Date
  breathingRate Float
  userId        String   @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dateTime])
}

model HeartRateVariability {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateTime   DateTime @db.Date
  dailyRmssd Float
  deepRmssd  Float
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dateTime])
}

model SpO2 {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateTime DateTime @db.Date
  avg      Float
  min      Float
  max      Float
  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, dateTime])
}
